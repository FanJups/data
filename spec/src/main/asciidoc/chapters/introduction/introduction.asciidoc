// Copyright (c) 2022 Nathan Rauh, Otavio Santana (project leads)
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

== Introduction

The Jakarta Data specification provides an API for easier data access. A
Java developer can split the persistence from the model with several features,
such as the ability to compose custom query methods on a Repository interface where the framework
will implement it.

There is no doubt about the importance of data around the application. We often talk about a stateless application, where we delegate the application's state to the database.

Dealing with a database is one of the biggest challenges within a software architecture. In addition to choosing one of several options on the market, it is necessary to consider the persistence integrations. Jakarta Data makes life easier for Java developers.

=== Goals

Jakarta Data works in a tight integration between Java and a persistence layer, where it has the following specification goals:

* Be a persistence agnostic API. Therefore, through abstractions, it will connect different types of databases and storage sources.
* Be a pluggable and extensible API. Even when the API won't support a particular behavior of a storage engine, it might provide an extensible API to make it possible.

=== Non-Goals

As with any software component, these decisions come with trade-offs and the following non-goals:

* Provide specific features of Jakarta Persistence, Jakarta NoSQL, etc. Those APIs have their own specifications.
* Replace the Jakarta Persistence or Jakarta NoSQL specifications. Indeed, Jakarta Data will work as a complement to these specifications as an agnostic API.

=== Conventions

include::project_team.adoc[]
